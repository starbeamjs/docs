/*  Start of Shiki Twoslash CSS:

Code blocks structurally look like:

<pre class='shiki lsp twoslash [theme-name]'>
  <div class='language-id'>[lang-id]</div>
    <div class='code-container'>
      <code>[the code as a series of spans]</code>
      <a href='playground...'>Try</a> (optional)
    </div>
  </pre>
*/

:root {
  --highlight-hue: var(--sb-fg-hue);
  --highlight-saturation: var(--sb-fg-saturation);

  --dropdown-bg: var(--vp-c-brand-dark);
  --dropdown-border: var(--vp-c-brand-dark);

  --twoslash-annotation-fg: var(--vp-custom-block-tip-text);

  --twoslash-error-hue: 0;
  --twoslash-error-saturation: 50%;
  --twoslash-error-bg-lightness: var(--highlight-lightness);
  --twoslash-error-fg-lightness: var(--dim-lightness-fg);

  --twoslash-add-hue: 153;
  --twoslash-add-saturation: 65%;
  --twoslash-add-bg-lightness: var(--dim-lightness-bg);
  --twoslash-add-fg-lightness: var(--dim-lightness-fg);

  --twoslash-error-bg: hsl(
    var(--twoslash-error-hue) var(--twoslash-error-saturation)
      var(--twoslash-error-bg-lightness)
  );

  --twoslash-error-fg: hsl(
    var(--twoslash-error-hue) var(--twoslash-error-saturation)
      var(--twoslash-error-fg-lightness)
  );

  --twoslash-error-border: var(--twoslash-error-fg);

  --twoslash-warning-hue: 58;
  --twoslash-warning-saturation: 100%;

  --twoslash-log-hue: 0;
  --twoslash-log-saturation: 0%;

  --accent-fg: var(--vp-button-brand-hover-text);
  --accent-bg: var(--sb-hover-bg);
  --accent-border: var(--vp-button-brand-hover-border);
}

:root {
  --vp-icon-copy: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' height='20' width='20' stroke='rgba(128,128,128,1)' stroke-width='2' viewBox='0 0 24 24'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2'/%3E%3C/svg%3E");
  --vp-icon-copied: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' height='20' width='20' stroke='rgba(0,220,180,1)' stroke-width='2' viewBox='0 0 24 24'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m-6 9 2 2 4-4'/%3E%3C/svg%3E");
}

.vp-doc pre > .code-container > code {
  padding: 0;
}

pre.twoslash,
pre.shiki {
  --highlight-color: hsl(
    var(--highlight-hue) var(--highlight-saturation) var(--highlight-lightness) /
      50%
  );
}

pre.shiki {
  --vp-code-line-highlight-color: var(--highlight-color);
}

:root {
  --my-hue: 20;
}

pre.twoslash * {
  --dim-bg: hsl(
    var(--highlight-hue) var(--highlight-saturation) var(--dim-lightness-bg)
  );

  --dim-fg: hsl(
    var(--highlight-hue) var(--highlight-saturation) var(--dim-lightness-fg)
  );
}

html.dark {
  --highlight-lightness: 35%;
  --dim-lightness-bg: 20%;
  --dim-lightness-fg: 85%;
}

html:not(.dark) {
  --highlight-lightness: 80%;
  --dim-lightness-bg: 95%;
  --dim-lightness-fg: 30%;
}

pre {
  /* In theory shiki will overwrite these, but this is to make sure there are defaults regardless */
  background-color: white;
  color: black;

  /* Give it some space to breathe */
  padding-block: 0.5rem;

  /* All code samples get a grey border, twoslash ones get a different color */
  /* border-color: var(--vp-button-alt-border);
  border-style: solid;
  border-inline-start-width: 0;
  border-inline-end-width: 0.1rem;
  border-block-start-width: 0;
  border-block-end-width: 0.1rem; */
  border: none;
  border-radius: var(--sb-code-radius);

  margin-block-end: 3rem;

  /* Important to allow the code to move horizontally; */
  overflow-x: auto;
}

.vp-doc pre.shiki {
  overflow-x: auto;
  overflow-y: visible;
  height: auto;
  --vp-code-line-diff-remove-color: hsl(
    var(--twoslash-error-hue) var(--twoslash-error-saturation)
      var(--twoslash-error-bg-lightness) / 100%
  );
  --vp-code-line-diff-add-color: hsl(
    var(--twoslash-add-hue) var(--twoslash-add-saturation)
      var(--twoslash-add-bg-lightness) / var(--sb-bg-lightness-normal)
  );

  &.twoslash {
    .line {
      padding-inline: var(--sb-code-padding-inline);
    }
  }

  &.twoslash code {
    padding-block: var(--sb-code-padding-block);

    .line::before {
      content: "";
      display: none;
    }
  }

  .line::before {
    content: " ";
    grid-column: 1;
    display: grid;
    width: 0;
    margin-inline: var(--sb-code-padding-inline);

    justify-content: end;
    position: static;
  }

  &.has-starbeam-lines {
    counter-reset: starbeam-lines;
    .line::before {
      width: calc(var(--vp-code-font-size) * var(--vp-code-line-height));
      height: calc(var(--vp-code-font-size));
    }
  }

  &.has-starbeam-lines,
  &.has-diff {
    .line::before {
      width: calc(var(--vp-code-font-size) * var(--vp-code-line-height));
    }
  }

  .line {
    transition: filter 0.2s ease-in-out;

    --saturation: 100%;

    background-color: hsl(
      var(--hue) var(--saturation) var(--bg-lightness) /
        var(--sb-bg-lightness-dim)
    );
  }

  .line.starbeam {
    &,
    &::before {
      --fg-lightness: var(--sb-fg-lightness-bright);
      --bg-lightness: var(--sb-bg-lightness-bright);
    }

    &:not(.annotate)::before {
      display: flex;
      font-family: var(--icons);
      align-items: center;

      /**
        * When --custom-logo exists, the `font-size` declaration will
        * be intentionally invalid.
        *
        * When --icon exists, the `width` and `height` declarations
        * will be intentionally invalid.
        *
        * TL;DR `--icon` and `--custom-logo` are mutually exclusive,
        * and serve as a switch
        */

      font-size: var(
        --custom-logo,
        calc(var(--vp-code-font-size) * var(--vp-code-line-height))
      );
      content: var(--icon, "");
      color: hsl(var(--hue) var(--saturation) var(--fg-lightness));

      background: var(--custom-logo) right center/contain no-repeat;
    }
  }

  .line.interface:not(.sfc) {
    --hue: 211;
    --bg-lightness: 80%;
  }

  &:not(:hover) .line.interface:not(.sfc) {
    filter: blur(0) saturate(50%) opacity(70%);
  }

  :not(.line.interface) + .line.interface:not(.sfc)::before {
    --custom-logo: url(./images/ts.svg);
  }

  .line.template,
  .line.template::before {
    --hue: 130;
    --fg-lightness: var(--sb-fg-lightness-bright);
    --bg-lightness: var(--sb-bg-lightness-bright);
  }

  .line.template.tag:first-child + .line.template.tag,
  :not(.line.template.tag) + .line.template.tag + .line.template.tag {
    &,
    &::before {
      --icon-ignore: "html";
    }
  }

  .line.bare.template:first-child,
  :not(.line.bare.template) + .line.bare.template {
    &::before {
      --icon-ignore: "html";
    }
  }

  .line.script:first-child + .line.script,
  :not(.line.script) + .line.script + .line.script {
    &::before {
      --icon-ignore: "javascript";
    }
  }

  .line.annotate {
    counter-increment: starbeam-lines;
    &::before {
      display: flex;
      --enlarge-by: 0.3;
      --enlarge-multiple: calc(var(--enlarge-by) + 1);
      content: counter(starbeam-lines, annotation);
      color: var(--annotation-color);
      font-size: calc(100% * var(--enlarge-multiple));
      height: max-content;
      /**
       * subtract 0.1 to align with the visible text, not including whitespace below descenders.
       * divide by 1.3 to get the height of the parent (before font-size: 130%)
       */
      line-height: calc(var(--vp-code-line-height) / var(--enlarge-multiple)) -
        (var(--enlarge-by) / 3);
    }
  }

  .line.script,
  .line.script::before {
    --hue: var(--javascript-hue);
    --saturation: var(--javascript-saturation);
  }

  .line.react {
    --hue: 193;
    --bg-lightness: 50%;

    &::before {
      --custom-logo: url(./images/react.svg);
    }
  }

  .line.preact {
    --hue: 261;
    --bg-lightness: 50%;

    &::before {
      --custom-logo: url(./images/preact.svg);
    }
  }

  @supports (selector(:has(*))) {
    .line.sfc.script:first-child,
    :not(.line.sfc.script) + .line.sfc.script {
      filter: opacity(50%);
    }

    .line.sfc.script:last-child,
    .line.sfc.script:has(+ :not(.line.sfc.script)) {
      filter: opacity(50%);
    }

    .line.sfc.template.tag:first-child,
    :not(.line.sfc.template.tag) + .line.sfc.template.tag {
      filter: opacity(50%);
    }

    .line.sfc.template.tag:last-child,
    .line.sfc.template.tag:has(+ :not(.line.sfc.template.tag)) {
      filter: opacity(50%);
    }
  }

  code {
    padding: 0;
    white-space: pre-wrap;
    width: 100%;

    display: grid;
    grid-auto-flow: row;
    grid-template-columns: 1fr;
    line-height: var(--vp-code-line-height);
    background-color: transparent;

    .line {
      width: 100%;
      display: flex;
      min-height: 1rem;
      align-items: center;

      > span {
        width: max-content;
      }

      &.diff {
        margin: 0;
        padding: 0;
        width: 100%;

        &.remove {
          opacity: 0.7;
        }
      }
    }
  }
}

pre.shiki,
pre.shiki :before,
pre.shiki :after {
  --vp-code-line-diff-remove-symbol-color: hsl(
    var(--twoslash-error-hue) var(--twoslash-error-saturation)
      var(--sb-bg-lightness-normal)
  );
}

pre.shiki:hover .dim {
  opacity: 1;
}
pre.shiki div.dim {
  opacity: 0.5;
}
pre.shiki div.dim,
pre.shiki div.highlight,
pre.shiki {
  margin: 0;
  padding: 0;
}
pre.shiki div.highlight {
  opacity: 1;
  background-color: var(--highlight-color);
}
pre.shiki > code > .line {
  &.highlight,
  &.diff {
    --noop: true;
  }
}

/** Don't show the language identifiers */
pre.shiki .language-id {
  display: none;
}

/* Visually differentiates twoslash code samples  */
pre.twoslash,
pre.shiki {
  border-color: var(--vp-c-brand-light);
  overflow: hidden;
}

pre.twoslash {
  --noop: true;
  /* container: twoslash / inline-size; */
}

/** When you mouse over the pre, show the underlines */
pre.twoslash:hover data-lsp {
  border-color: var(--accent-border);
}

pre.twoslash data-lsp {
  z-index: 999;
  cursor: pointer;
  &:hover {
    background-color: var(--sb-hover-bg-overlay);
    transition: all 0.2s ease-in-out;
  }
}

/** The tooltip-like which provides the LSP response */
pre.twoslash data-lsp:hover::before,
pre.twoslash data-lsp:active::before {
  content: attr(lsp);
  position: absolute;
  transform: translate(0, calc(1em * var(--vp-code-line-height)));
  margin-inline-end: 1rem;
  background-color: var(--dim-bg);
  color: var(--dim-fg);
  border-color: var(--dim-fg);

  text-align: left;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  border-width: 1px;
  border-style: solid;
  border-block-end-width: 2px;
  box-shadow: 0 2px 1px -1px rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%),
    0 1px 3px 0 rgb(0 0 0 / 12%);
  font-family: var(--vp-font-family-mono);
  font-size: 0.7rem;
  white-space: pre-wrap;
  z-index: 999;
  /* top: 0;
  left: 0; */
}

pre .code-container {
  overflow: visible;
}

/* The try button */
pre .code-container > a {
  position: absolute;
  right: 8px;
  bottom: 8px;
  border-radius: 4px;
  border: 1px solid var(--accent-border);
  color: var(--accent-fg);
  padding: 0 8px;
  text-decoration: none;
  opacity: 0;
  transition-timing-function: ease;
  transition: opacity 0.3s;
}
/* Respect no animations */
@media (prefers-reduced-motion: reduce) {
  pre .code-container > a {
    transition: none;
  }
}
pre .code-container > a:hover {
  color: white;
  background-color: var(--accent-bg);
}
pre .code-container:hover a {
  opacity: 1;
}
pre .code-container > code {
  width: 100cqw;
}

.vp-doc [class^="language-"] {
  position: relative;
}

.vp-doc [class^="language-"] > button.copy {
  --height: calc(100% - var(--sb-ui-padding-block) * 2);

  display: grid;
  contain: layout paint content;
  width: 40px;

  max-height: calc(100% - var(--sb-ui-padding-block) * 2);
  top: 0;
  right: 0;
  transform: translate3d(
    calc(var(--sb-ui-padding-block) * -1),
    var(--sb-ui-padding-block),
    0
  );

  &:hover {
    background-color: var(--vp-input-hover-border-color);
  }

  &:active {
    background-color: var(--vp-c-neutral);
  }

  &.copied,
  &:hover.copied {
    background-color: var(--sb-bg-green);
  }

  &.copied,
  &:hover.copied {
    border-radius: 4px;
  }

  &::before {
    display: none !important;
  }

  /* min-width: 40px;
  width: max-content;
  top: initial;
  right: var(--sb-ui-padding-block);
  transform: translateY(var(--sb-ui-padding-block)); */
}

pre code,
.vp-doc [class*="language-"] pre code {
  --font-family: var(--vp-font-family-mono);
  /* font-family: "JetBrains Mono", Menlo, Monaco, Consolas, Courier New, monospace; */
  white-space: pre-wrap;
  -webkit-overflow-scrolling: touch;
}
pre code a {
  text-decoration: none;
}
pre data-err {
  /* Extracted from VS Code */
  background: url("data:image/svg+xml,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%206%203'%20enable-background%3D'new%200%200%206%203'%20height%3D'3'%20width%3D'6'%3E%3Cg%20fill%3D'%23c94824'%3E%3Cpolygon%20points%3D'5.5%2C0%202.5%2C3%201.1%2C3%204.1%2C0'%2F%3E%3Cpolygon%20points%3D'4%2C0%206%2C2%206%2C0.6%205.4%2C0'%2F%3E%3Cpolygon%20points%3D'0%2C2%201%2C3%202.4%2C3%200%2C0.6'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E")
    repeat-x bottom left;
  padding-bottom: 3px;
}
pre .query {
  margin-bottom: 10px;
  color: var(--vp-button-alt-text);
  display: inline-block;
}

/* In order to have the 'popped out' style design and to not break the layout
  /* we need to place a fake and un-selectable copy of the error which _isn't_ broken out
  /* behind the actual error message.

  /* This sections keeps both of those two in in sync  */

pre span.error {
  display: grid;
}

pre span.error-behind {
  display: none;
}

pre span.error,
pre span.error-behind {
  width: 100cqi;
  margin-block-start: 1em;
  margin-block-end: 0.5em;
  padding-inline-start: 2em;
  padding-inline-end: 2em;
  text-indent: -1em;
  /* margin-top: 8px;
  margin-bottom: 4px;
  padding: 6px;
  padding-left: 14px; */
  /* width: calc(100% - 20px); */
  white-space: pre-wrap;
}
pre .error {
  background-color: var(--twoslash-error-bg);

  border-inline-start: 2px solid var(--twoslash-error-border);
  /* border-inline-end: 1px solid var(--twoslash-error-border); */

  /* Give the space to the error code */
  display: flex;
  align-items: center;
  color: black;
}

pre .error > span {
  color: var(--twoslash-error-fg);
}

pre .error .code {
  display: none;
}
pre span.error-behind {
  user-select: none;
  visibility: transparent;
  color: var(--twoslash-error-bg);
}
/* Queries */
pre .arrow {
  /* Transparent background */
  background-color: var(--vp-c-bg-mute);
  position: relative;
  top: -5px;
  margin-left: 0.1rem;
  /* Edges */
  border-left: 1px solid var(--vp-c-bg-mute);
  border-top: 1px solid var(--vp-c-bg-mute);
  transform: translateY(25%) rotate(45deg);
  /* Size */
  height: 8px;
  width: 8px;
}
pre .popover {
  --sb-hl-hue: 0;
  --sb-hl-saturation: 100%;
  --sb-hl-lightness: 30%;
  margin-bottom: 10px;
  background-color: var(--vp-c-bg-mute);
  display: inline-block;
  padding: 0 0.5rem 0.3rem;
  margin-top: 10px;
  border-radius: 3px;
}
/* Completion */
pre .inline-completions ul.dropdown {
  display: inline-block;
  position: absolute;
  width: 240px;
  background-color: gainsboro;
  color: grey;
  padding-top: 4px;
  font-family: var(--vp-font-family-mono);
  font-size: 0.8rem;
  margin: 0;
  padding: 0;
  border-left: 4px solid var(--dropdown-border);
}
pre .inline-completions ul.dropdown::before {
  background-color: var(--dropdown-bg);
  width: 2px;
  position: absolute;
  top: -1.2rem;
  left: -3px;
  content: " ";
}
pre .inline-completions ul.dropdown li {
  overflow-x: hidden;
  padding-left: 4px;
  margin-bottom: 4px;
}
pre .inline-completions ul.dropdown li.deprecated {
  text-decoration: line-through;
}
pre .inline-completions ul.dropdown li span.result-found {
  color: var(--accent-fg);
}
pre .inline-completions ul.dropdown li span.result {
  width: 100px;
  color: var(--vp-c-text-1);
  display: inline-block;
}

data-lsp {
  /* Ensures there's no 1px jump when the hover happens */
  border-bottom: 1px dotted transparent;
  /* Fades in unobtrusively */
  transition-timing-function: ease;
  transition: border-color 0.3s;
}
/* Respect people's wishes to not have animations */
@media (prefers-reduced-motion: reduce) {
  data-lsp {
    transition: none;
  }
}

/** Annotations support, providing a tool for meta commentary */
.tag-container {
  position: relative;
}
.tag-container .twoslash-annotation {
  position: absolute;
  font-family: var(--vp-font-family-mono);
  right: -10px;
  /** Default annotation text to 200px */
  width: 200px;
  color: var(--twoslash-annotation-fg);
  background-color: transparent;
}
.tag-container .twoslash-annotation p {
  text-align: left;
  font-size: 0.8rem;
  line-height: 0.9rem;
}
.tag-container .twoslash-annotation svg {
  float: left;
  margin-left: -44px;
}
.tag-container .twoslash-annotation.left {
  right: auto;
  left: -200px;
}
.tag-container .twoslash-annotation.left svg {
  float: right;
  margin-right: -5px;
}

/** Support for showing console log/warn/errors inline */
pre .logger {
  display: flex;
  align-items: center;
  color: black;
  padding: 6px;
  padding-left: 8px;
  width: calc(100% - 19px);
  white-space: pre-wrap;
}
pre .logger svg {
  margin-right: 9px;
}

pre .logger {
  background-color: hsl(
    var(--current-hue) var(--current-saturation) var(--dim-lightness-bg)
  );
  border-left: 2px solid
    hsl(var(--current-hue) var(--current-saturation) var(--dim-lightness-fg));
}

pre .logger.error-log {
  --current-hue: var(--twoslash-error-hue);
  --current-saturation: var(--twoslash-error-saturation);
}
pre .logger.warn-log {
  --current-hue: var(--twoslash-warning-hue);
  --current-saturation: var(--twoslash-warning-saturation);
}
pre .logger.log-log {
  --current-hue: var(--twoslash-log-hue);
  --current-saturation: var(--twoslash-log-saturation);
}
pre .logger.log-log svg {
  margin-left: 6px;
  margin-right: 9px;
}
