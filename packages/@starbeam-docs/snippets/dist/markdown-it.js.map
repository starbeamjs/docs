{"version":3,"sources":["../src/markdown-it.ts"],"names":[],"mappings":"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","file":"markdown-it.js","sourcesContent":["import type { RuleBlock } from \"@jsergo/mdit\";\nimport \"@mdit-vue/plugin-sfc\";\nimport Snippet, {\n  Snippets,\n  type Highlight,\n  type Region,\n} from \"docs-snippet\";\nimport { existsSync, readFileSync } from \"fs\";\nimport type MarkdownIt from \"markdown-it\";\nimport stripAnsi from \"strip-ansi\";\nimport type { VitepressStateBlock } from \"./env.js\";\nimport { RenderLanguageRegion } from \"./snippets/language-region.js\";\nimport { MDState } from \"./utils.js\";\n\nexport function snippetPlugin(md: MarkdownIt, srcDir: string) {\n  const parser: RuleBlock = (\n    state: VitepressStateBlock,\n    startLine,\n    _endLine,\n    silent\n  ): boolean => {\n    const mdState = new MDState(md, state);\n    const line = mdState.line(startLine);\n\n    if (line.isCodeBlock) {\n      return false;\n    }\n\n    // The syntax is `!(./-snippets/cell.ts#cell)\n    if (line.startsWith(\"!(\")) {\n      const snippet = line.string();\n\n      // use named captures\n      const match = snippet.match(\n        /^!\\((?<file>(.*?))(?:#(?<region>.*))?\\)$/\n      );\n\n      if (match) {\n        const { region, file } = match.groups as {\n          region: string | undefined;\n          file: string;\n        };\n\n        mdState.consumeLine();\n        pushSnippetToken(\n          mdState,\n          mdState.env.resolve(file),\n          region\n        );\n        return true;\n      }\n    }\n    if (line.startsWith(\"```snippet\")) {\n      const fenceline = line.string();\n\n      let rawPath = fenceline.match(\n        /```snippet\\s+\\{(.*)\\}/\n      )?.[1] as string | undefined;\n\n      if (silent) {\n        return true;\n      }\n\n      const fenceContent = line.next?.until(\n        (line) => line.slice()?.trim() === \"```\"\n      );\n\n      if (!fenceContent) {\n        return false;\n      }\n\n      const token = state.push(\"html_block\", \"\", 0);\n\n      if (!rawPath?.startsWith(\"#\")) {\n        token.content = error(\n          `Invalid region attribute \"${rawPath}\"`\n        );\n        return true;\n      }\n\n      let regionName = rawPath.slice(1);\n\n      const filename = mdState.env.resolve(fenceContent.trim());\n\n      if (!existsSync(filename)) {\n        token.content = mdState.error(\n          `File \"${filename}\" does not exist`\n        );\n        return true;\n      }\n\n      let content = readFileSync(filename, \"utf8\");\n\n      if (!regionName) {\n        content = `// #region all\\n${content}\\n// #endregion\\n`;\n        regionName = \"all\";\n      }\n\n      let snippet: Snippets;\n\n      try {\n        snippet = Snippet(content);\n      } catch (e) {\n        token.content = error(\n          `Invalid source file: ${codeForError(\n            (e as Error).stack ?? \"missing stack trace\"\n          )}\\n\\nCode:\\n\\n${codeForError(content)}`\n        );\n        return true;\n      }\n\n      const region = snippet.regions?.get(regionName);\n\n      if (region === undefined) {\n        token.content = error(\n          `Invalid region name: ${regionName}\\n\\n${codeForError(\n            fenceContent\n          )}`\n        );\n        return true;\n      }\n\n      token.content = highlightRegion({\n        state: mdState,\n        filename,\n        region,\n        complete: snippet,\n      });\n\n      return true;\n    }\n\n    return false;\n  };\n\n  md.block.ruler.before(\"fence\", \"snippet\", parser);\n}\n\nfunction pushSnippetToken(\n  state: MDState,\n  filename: string,\n  regionName: string | undefined\n) {\n  const token = state.open();\n\n  if (!existsSync(filename)) {\n    token.content = state.error(\n      `File \"${filename}\" does not exist`\n    );\n    return true;\n  }\n\n  const content = readFileSync(filename, \"utf8\");\n\n  let snippet: Snippets;\n\n  try {\n    snippet = Snippet(content);\n  } catch (e) {\n    token.content = error(\n      `Invalid source file: ${codeForError(\n        (e as Error).stack ?? \"missing stack trace\"\n      )}\\n\\nCode:\\n\\n${codeForError(content)}`\n    );\n    return true;\n  }\n\n  if (regionName?.trim()) {\n    const region = snippet.regions?.get(regionName);\n\n    if (region === undefined) {\n      token.content = error(\n        `Invalid region name: ${regionName}\\n\\n${codeForError(\n          filename\n        )}`\n      );\n      return true;\n    }\n\n    token.content = highlightRegion({\n      state,\n      filename,\n      region,\n      complete: snippet,\n    });\n  } else {\n    token.content = highlight(state, filename, snippet);\n  }\n\n  return token;\n}\n\nfunction highlightRegion({\n  state,\n  filename,\n  region,\n  complete,\n}: {\n  state: MDState;\n  filename: string;\n  region: Region;\n  complete: Snippets;\n}): string {\n  const tsFenced = RenderLanguageRegion.create({\n    filename,\n    region,\n    parsed: complete,\n    kind: \"ts\",\n    env: state.env,\n  }).highlight(state.highlight);\n\n  if (region.ts.code === region.js.code) {\n    return `<section class=\"both-lang\">${tsFenced}</section>`;\n  }\n\n  const jsFenced = RenderLanguageRegion.create({\n    filename,\n    region,\n    parsed: complete,\n    kind: \"js\",\n    env: state.env,\n  }).highlight(state.highlight);\n\n  return `<Code><template #ts>${tsFenced}</template><template #js>${jsFenced}</template></Code>`;\n}\n\nfunction highlight(\n  state: MDState,\n  filename: string,\n  region: Snippets\n) {\n  const tsFenced = highlightLang(state, {\n    filename,\n    lang: \"ts\",\n    code: region.ts.code,\n    highlights: [],\n    prefix: \"\",\n  });\n\n  if (region.ts.code === region.js.code) {\n    return `<section class=\"both-lang\">${tsFenced}</section>`;\n  }\n\n  const jsFenced = highlightLang(state, {\n    filename,\n    lang: \"js\",\n    code: region.js.code,\n    highlights: [],\n    prefix: \"\",\n  });\n\n  return `<Code><template #ts>${tsFenced}</template><template #js>${jsFenced}</template></Code>`;\n}\n\nfunction highlightLang(\n  state: MDState,\n  {\n    code,\n    lang,\n    filename,\n    highlights,\n    prefix,\n    postfix,\n  }: {\n    code: string;\n    lang: \"ts\" | \"js\";\n    filename: string;\n    highlights?: Highlight[];\n    prefix?: string;\n    postfix?: string;\n  }\n): string {\n  const attr =\n    highlights && highlights.length > 0\n      ? `{${highlights.map((h) => h.lines).join(\",\")}}`\n      : \"\";\n\n  console.log({ filename });\n\n  const output = [];\n\n  if (prefix) {\n    output.push(prefix, \"// ---cut---\");\n  }\n\n  output.push(code);\n\n  if (postfix) {\n    output.push(\"// ---cut-after---\", postfix);\n  }\n\n  const source = output.join(\"\\n\").trimEnd();\n  const highlighted = state.highlight?.(\n    source,\n    `tsx twoslash`,\n    `filename=\"${encodeURIComponent(\n      filename\n    )}\" lang=${lang} ${attr}`\n  );\n\n  return `<pre><code class=\"language-ts\">${highlighted}</code></pre>`;\n}\n\nfunction error(message: string) {\n  return `<div class=\"language-error ext-error\"><pre class=\"ext-error\"><code>${message}</code></pre></div>`;\n}\n\nfunction normalize(data: string) {\n  // escape < and >\n  return breakable(data)\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\nfunction breakable(data: string) {\n  // add a wbr around `/`\n  return data.replace(/\\//g, \"<wbr>/<wbr>\");\n}\n\nfunction codeForError(code: string) {\n  // escape the code\n  return stripAnsi(code)\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n"]}