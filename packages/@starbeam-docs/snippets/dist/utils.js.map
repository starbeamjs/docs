{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import type { SfcBlock } from \"@mdit-vue/plugin-sfc\";\nimport MarkdownIt from \"markdown-it\";\nimport type StateBlock from \"markdown-it/lib/rules_block/state_block.js\";\nimport { dirname, relative, resolve } from \"node:path\";\n\nexport class MDState {\n  readonly #state: StateBlock;\n  readonly #md: MarkdownIt;\n\n  constructor(md: MarkdownIt, state: StateBlock) {\n    this.#state = state;\n    this.#md = md;\n  }\n\n  line(lineno: number): LineState {\n    return new LineState(this.#state, lineno);\n  }\n\n  consumeLine(): void {\n    this.#state.line = this.#state.line + 1;\n  }\n\n  get highlight(): HighlightFn | null | undefined {\n    return this.#md.options.highlight;\n  }\n\n  get md(): MarkdownIt {\n    return this.#md;\n  }\n\n  get env(): StateEnv {\n    return new StateEnv(this.#state.env);\n  }\n\n  open() {\n    return this.#state.push(\"html_block\", \"\", 0);\n  }\n\n  render(content: string) {\n    return this.#md.render(content, this.#state.env);\n  }\n\n  error(message: string) {\n    return `<div class=\"language-error ext-error\"><pre class=\"ext-error\"><code>${message}</code></pre></div>`;\n  }\n}\n\nexport type HighlightFn = (\n  str: string,\n  lang: string,\n  attrs: string\n) => string;\n\ninterface StateEnvInfo {\n  readonly path: string;\n  readonly relativePath: string;\n  readonly cleanUrls: boolean;\n  readonly sfcBlocks: SfcBlock;\n  readonly content: string;\n  readonly frontmatter: Record<string, string>;\n  readonly excerpt: string;\n}\n\nexport class StateEnv {\n  readonly #env: StateEnvInfo;\n\n  constructor(env: StateEnvInfo) {\n    this.#env = env;\n  }\n\n  get path() {\n    return this.#env.relativePath;\n  }\n\n  resolve(relativeFile: string) {\n    return resolve(dirname(this.#env.path), relativeFile);\n  }\n\n  get vitepressRoot() {\n    return relative(this.#env.path, this.#env.relativePath);\n  }\n\n  get absolutePath() {\n    return this.#env.path;\n  }\n}\n\nexport class LineState {\n  #state: StateBlock;\n  #startLine: number;\n\n  constructor(state: StateBlock, startLine: number) {\n    this.#state = state;\n    this.#startLine = startLine;\n  }\n\n  get next(): LineState | undefined {\n    if (this.#startLine < this.#state.lineMax) {\n      return new LineState(this.#state, this.#startLine + 1);\n    } else {\n      return undefined;\n    }\n  }\n\n  get position(): { pos: number; max: number } {\n    return {\n      pos: this.contentStart,\n      max: this.end,\n    };\n  }\n\n  get #src(): string {\n    return this.#state.src;\n  }\n\n  consume(): LineState {\n    this.#state.line = this.#startLine + 1;\n    return new LineState(this.#state, this.#startLine + 1);\n  }\n\n  until(predicate: (line: LineState) => boolean): string {\n    let line: LineState | undefined = this;\n    let lines = [];\n\n    while (line) {\n      const next: LineState | undefined = line.next;\n\n      if (!next) {\n        this.#state.line = line.#startLine + 1;\n        break;\n      }\n\n      lines.push(line.string({ ws: true }));\n      line = next;\n\n      if (predicate(next)) {\n        this.#state.line = next.#startLine + 1;\n        break;\n      }\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  string({ ws = false }: { ws?: boolean } = {}): string {\n    return this.#src.slice(\n      ws ? this.start : this.contentStart,\n      this.end\n    );\n  }\n\n  startsWith(chars: string): boolean {\n    return this.slice(chars.length) === chars;\n  }\n\n  slice(\n    n: number = this.end - this.contentStart\n  ): string | undefined {\n    if (n > this.end - this.contentStart) {\n      return undefined;\n    }\n\n    const pos = this.contentStart;\n    let chars = \"\";\n\n    for (let i = 0; i < n; ++i) {\n      chars += this.#src.charAt(pos + i);\n    }\n\n    return chars;\n  }\n\n  /**\n   * The total indent of the line, including the required indent.\n   */\n  get #totalIndent(): number {\n    return this.#state.sCount[this.#startLine] ?? 0;\n  }\n\n  /**\n   * The required indent of the line.\n   */\n  get #requiredIndent(): number {\n    return this.#state.blkIndent;\n  }\n\n  /**\n   * The indent of the line, excluding the required indent.\n   */\n  get indent(): number {\n    return this.#totalIndent - this.#requiredIndent;\n  }\n\n  /**\n   * if it's indented more than 3 spaces, it's a code block\n   */\n  get isCodeBlock(): boolean {\n    return this.indent >= 4;\n  }\n\n  get start(): number {\n    return this.#state.bMarks[this.#startLine] ?? 0;\n  }\n\n  get wsChars(): number {\n    return this.#state.tShift[this.#startLine] ?? 0;\n  }\n\n  get contentStart(): number {\n    return this.start + this.wsChars;\n  }\n\n  get end(): number {\n    return this.#state.eMarks[this.#startLine] ?? 0;\n  }\n}\n\nexport function position(\n  state: StateBlock,\n  startLine: number\n): { pos: number; max: number } {\n  const pos =\n    (state.bMarks[startLine] ?? 0) +\n    (state.tShift[startLine] ?? 0);\n  const max = state.eMarks[startLine] ?? 0;\n\n  return { pos, max };\n}\n"]}