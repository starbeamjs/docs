{"version":3,"sources":["../../src/snippets/language-region.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCW,qCACA,uCACA,uCACA,uCACA,yCACA,oCAyBL,qCAsDA,2CAIA,oCAQJ,uCAKA;AAhIF,OAAO,MAAM;IACX,OAAO,OAAO,EACZ,SAAQ,EACR,OAAM,EACN,OAAM,EACN,KAAI,EACJ,IAAG,EAOJ,EAAE;QACD,MAAM,OAAO,MAAM,CAAC,KAAK;QACzB,MAAM,SAAS,MAAM,CAAC,KAAK;QAE3B,OAAO,IAAI,qBAAqB;YAC9B;YACA,QAAQ;YACR;YACA;YACA;YACA;QACF;IACF;IA6CA,UAAU,SAAyC,EAAE;QACnD,MAAM,OAAO,sBAAA,IAAI,EAAE,SAAO,IAAI;QAC9B,MAAM,UAAS,uBAAA,IAAI,EAAE,SAAA,aAAN,IAAI;QACnB,MAAM,WAAU,uBAAA,IAAI,EAAE,UAAA,cAAN,IAAI;QAEpB,MAAM,SAAS,EAAE;QAEjB,IAAI,sBAAA,IAAI,EAAE,WAAS,MAAM;YACvB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,SAAQ;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,sBAAA,IAAI,EAAE,WAAS,MAAM;YACvB,MAAM,4BAAM,IAAI,EAAE;YAElB,IAAI,KAAK;gBACP,OAAO,IAAI,CAAC,IAAI,IAAI;YACtB,CAAC;QACH,CAAC;QAED,IAAI,WAAU,sBAAA,IAAI,EAAE,WAAS,MAAM;YACjC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;QAEZ,IAAI,UAAS;YACX,OAAO,IAAI,CAAC,sBAAsB;QACpC,CAAC;QAED,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,OAAO;YAGtC;QADF,OACE,CAAA,aAAA,sBAAA,uBAAA,KAAA,IAAA,UAAY,QAAQ,sCAAgB,IAAI,EAAE,qBAA1C,wBAAA,aACA,CAAC,4DAA4D,EAAE,KAAK,aAAa,CAAC;IAEtF;IA3EA,YAAoB,EAClB,KAAI,EACJ,OAAM,EACN,OAAM,EACN,OAAM,EACN,SAAQ,EACR,IAAG,EAQJ,CAAE;QASH,6BAAI;iBAAJ;;;QAsDA,6BAAI;iBAAJ;;;QAIA,6BAAI;iBAAJ;;;QAQA,8BAAA;QAKA,8BAAA;QArGA,6BAAS;;mBAAT,KAAA;;QACA,6BAAS;;mBAAT,KAAA;;QACA,6BAAS;;mBAAT,KAAA;;QACA,6BAAS;;mBAAT,KAAA;;QACA,6BAAS;;mBAAT,KAAA;;QACA,6BAAS;;mBAAT,KAAA;;oCAiBQ,OAAO;oCACP,SAAS;oCACT,SAAS;oCACT,SAAS;oCACT,WAAW;oCACX,MAAM;IACd;AA6EF,CAAC;AA3EC,SAAA,WAAY;IACV,MAAM,QAAkB,EAAE;IAE1B,MAAM,mCAAa,IAAI,EAAE;IACzB,IAAI,cAAc,WAAW,MAAM,GAAG,GAAG;QACvC,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAC,IAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,SAAS,uBAAC,IAAI,EAAE,YAAU,MAAM,wBAAE,IAAI,EAAE,OAAK,CAAC;IAE1E,OAAO,MAAM,IAAI,CAAC;AACpB;AA2CA,SAAA,iBAA2C;IACzC,OAAO,sBAAA,IAAI,EAAE,SAAO,UAAU;AAChC;AAEA,SAAA,UAAkC;IAChC,MAAM,UAAU,sBAAA,IAAI,EAAE,SAAO,EAAE,CAAC,OAAO;IAEvC,IAAI,SAAS;QACX,OAAO,OAAO,CAAC,MAAM;IACvB,CAAC;AACH;AAEA,SAAA,SAAU;IACR,MAAM,QAAQ,sBAAA,IAAI,EAAE,SAAO,IAAI,CAAC,KAAK,CAAC;IACtC,OAAO,MAAM,KAAK,CAAC,GAAG,sBAAA,IAAI,EAAE,SAAO,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;AACzD;AAEA,SAAA,UAAW;IACT,MAAM,QAAQ,sBAAA,IAAI,EAAE,SAAO,IAAI,CAAC,KAAK,CAAC;IACtC,OAAO,MAAM,KAAK,CAAC,sBAAA,IAAI,EAAE,SAAO,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;AACpD","file":"language-region.js","sourcesContent":["import type {\n  Highlight,\n  LanguageRegion,\n  Region,\n  Snippets,\n  Source,\n} from \"docs-snippet\";\nimport type { HighlightFn, StateEnv } from \"../utils.js\";\n\nexport class RenderLanguageRegion {\n  static create({\n    filename,\n    region,\n    parsed,\n    kind,\n    env,\n  }: {\n    region: Region;\n    parsed: Snippets;\n    kind: \"ts\" | \"js\";\n    filename: string;\n    env: StateEnv;\n  }) {\n    const lang = region[kind];\n    const source = parsed[kind];\n\n    return new RenderLanguageRegion({\n      kind,\n      region: lang,\n      parsed,\n      source,\n      filename,\n      env,\n    });\n  }\n\n  readonly #kind: \"ts\" | \"js\";\n  readonly #region: LanguageRegion;\n  readonly #parsed: Snippets;\n  readonly #source: Source;\n  readonly #filename: string;\n  readonly #env: StateEnv;\n\n  private constructor({\n    kind,\n    region,\n    parsed,\n    source,\n    filename,\n    env,\n  }: {\n    kind: \"ts\" | \"js\";\n    region: LanguageRegion;\n    parsed: Snippets;\n    source: Source;\n    filename: string;\n    env: StateEnv;\n  }) {\n    this.#kind = kind;\n    this.#region = region;\n    this.#parsed = parsed;\n    this.#source = source;\n    this.#filename = filename;\n    this.#env = env;\n  }\n\n  get #attr() {\n    const attrs: string[] = [];\n\n    const highlights = this.#highlights;\n    if (highlights && highlights.length > 0) {\n      attrs.push(`{${highlights.map((h) => h.lines).join(\",\")}}`);\n    }\n\n    attrs.push(`filename=${JSON.stringify(this.#filename)} lang=${this.#kind}`);\n\n    return attrs.join(\" \");\n  }\n\n  highlight(highlight: HighlightFn | null | undefined) {\n    const code = this.#region.code;\n    const prefix = this.#prefix();\n    const postfix = this.#postfix();\n\n    const output = [];\n\n    if (this.#kind === \"js\") {\n      output.push(\"// @noErrors\");\n    }\n\n    if (prefix) {\n      output.push(prefix);\n    }\n\n    if (this.#kind === \"js\") {\n      const dts = this.#dts;\n\n      if (dts) {\n        output.push(dts.code);\n      }\n    }\n\n    if (prefix || this.#kind === \"js\") {\n      output.push(\"// ---cut---\");\n    }\n\n    output.push(code);\n\n    if (postfix) {\n      output.push(\"// ---cut-after---\", postfix);\n    }\n\n    const source = output.join(\"\\n\").trimEnd();\n\n    return (\n      highlight?.(source, \"tsx twoslash\", this.#attr) ??\n      `<pre><code class=\"language-ts\">// @jsxImportSource: preact\\n${code}</code></pre>`\n    );\n  }\n\n  get #highlights(): Highlight[] | undefined {\n    return this.#region.highlights;\n  }\n\n  get #dts(): LanguageRegion | void {\n    const regions = this.#parsed.ts.regions;\n\n    if (regions) {\n      return regions[\"dts\"];\n    }\n  }\n\n  #prefix() {\n    const lines = this.#source.code.split(\"\\n\");\n    return lines.slice(0, this.#region.offsets.start).join(\"\\n\");\n  }\n\n  #postfix() {\n    const lines = this.#source.code.split(\"\\n\");\n    return lines.slice(this.#region.offsets.end).join(\"\\n\");\n  }\n}\n"]}