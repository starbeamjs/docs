{"version":3,"sources":["../src/tokens.ts"],"names":[],"mappings":"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","file":"tokens.js","sourcesContent":["import type { PluginHelper } from \"@jsergo/mdit\";\nimport Token from \"markdown-it/lib/token.js\";\n\nexport type SingleAttrValue = AttrPart | boolean;\nexport type AttrPart = string | number | null | undefined;\nexport type AttrValue = SingleAttrValue | AttrPart[];\n\nexport class CustomBuiltin {\n  readonly #md: PluginHelper;\n\n  constructor(md: PluginHelper) {\n    this.#md = md;\n  }\n\n  el(\n    tag: string,\n    attrs: Record<string, AttrValue>,\n    children: Child[]\n  ): MarkdownElement {\n    return ParagraphElement.tag(tag, this.#md)\n      .attrs(attrs)\n      .push(...children);\n  }\n}\n\nexport abstract class MarkdownFragment implements LazyChild {\n  abstract done(): Token[];\n  protected abstract appendToken(token: Token): void;\n\n  #md: PluginHelper;\n\n  constructor(md: PluginHelper) {\n    this.#md = md;\n  }\n\n  render(tokens: MarkdownFragment): MarkdownFragment {\n    return tokens.push(...this.done());\n  }\n\n  protected get md(): PluginHelper {\n    return this.#md;\n  }\n\n  html(html: string): this {\n    this.push(...this.md.parse(html));\n    return this;\n  }\n\n  append(child: Child): this {\n    if (child === undefined || child === null) {\n      // do nothing\n    } else if (typeof child === \"string\") {\n      this.appendToken(text(child));\n    } else if (\"render\" in child) {\n      child.render(this);\n    } else {\n      this.appendToken(child);\n    }\n\n    return this;\n  }\n\n  push(...children: Child[]): this {\n    for (const child of children) {\n      this.append(child);\n    }\n    return this;\n  }\n\n  element(\n    {\n      tag,\n      attrs,\n      children,\n    }: {\n      tag: string;\n      attrs: Record<string, AttrValue>;\n      children: Children | undefined;\n    },\n    {\n      create,\n    }: {\n      create: {\n        tag: (tag: string, md: PluginHelper) => MarkdownElement;\n      };\n    }\n  ): this {\n    let el = create.tag(tag, this.md).attrs(attrs);\n\n    if (Array.isArray(children)) {\n      for (const child of children) {\n        el.append(child);\n      }\n    } else if (typeof children === \"function\") {\n      children(this);\n    }\n\n    this.push(...el.done());\n\n    return this;\n  }\n\n  htmlEl(...elArgs: ElArgs): this {\n    return this.element(normalizeElArgs(elArgs), {\n      create: HtmlElement,\n    });\n  }\n\n  el(...elArgs: ElArgs): this {\n    return this.element(normalizeElArgs(elArgs), {\n      create: ParagraphElement,\n    });\n  }\n}\n\nexport abstract class MarkdownElement extends MarkdownFragment {\n  abstract attr(key: string, value: AttrValue): this;\n\n  constructor(_tag: string, md: PluginHelper) {\n    super(md);\n  }\n\n  attrs(attrs: Record<string, AttrValue>): this {\n    for (const [key, value] of Object.entries(attrs)) {\n      this.attr(key, value);\n    }\n    return this;\n  }\n}\n\nexport class BasicFragment extends MarkdownFragment {\n  static empty(md: PluginHelper): MarkdownFragment {\n    return new BasicFragment(md);\n  }\n\n  readonly #tokens: Token[] = [];\n\n  protected override appendToken(token: Token): void {\n    this.#tokens.push(token);\n  }\n\n  override done(): Token[] {\n    return this.#tokens;\n  }\n}\n\nexport class HtmlElement extends MarkdownElement {\n  static tag(tag: string, md: PluginHelper): MarkdownElement {\n    return new HtmlElement(tag, md);\n  }\n\n  readonly #tag: string;\n  #open: string;\n  readonly #children: Token[] = [];\n\n  private constructor(tag: string, md: PluginHelper) {\n    super(tag, md);\n    this.#tag = tag;\n\n    this.#open = `<${this.#tag}`;\n  }\n\n  override attr(key: string, value: AttrValue): this {\n    const valueString = this.#attrValue(value);\n\n    if (valueString !== null) {\n      this.#open += ` ${key}=${valueString}`;\n    }\n\n    return this;\n  }\n\n  #attrValue(value: AttrValue): string | null {\n    if (Array.isArray(value)) {\n      return `\"${value.join(\" \")}`;\n    } else if (typeof value === \"string\") {\n      return JSON.stringify(value);\n    } else if (typeof value === \"number\") {\n      return `\"${value}\"`;\n    } else if (value === true) {\n      return `\"\"`;\n    } else {\n      return null;\n    }\n  }\n\n  override done(): Token[] {\n    const open = new Token(\"html_block\", \"\", 0);\n    open.content = `${this.#open}\\n\\n`;\n    const tokens: Token[] = [open];\n    tokens.push(...this.#children);\n\n    const close = new Token(\"html_block\", \"\", 0);\n    close.content = `\\n\\n</${this.#tag}>`;\n    tokens.push(close);\n\n    return tokens;\n  }\n\n  protected override appendToken(token: Token): void {\n    if (!this.#open.endsWith(\">\")) this.#open += \">\";\n\n    this.#children.push(token);\n  }\n}\n\nexport class ParagraphElement extends MarkdownElement {\n  static tag(tag: string, md: PluginHelper): ParagraphElement {\n    return new ParagraphElement(\n      md,\n      tag,\n      new Token(\"paragraph_open\", tag, 1),\n      []\n    );\n  }\n\n  readonly #tag: string;\n  readonly #token: Token;\n  readonly #children: Token[];\n\n  private constructor(\n    md: PluginHelper,\n    tag: string,\n    token: Token,\n    children: Token[]\n  ) {\n    super(tag, md);\n    this.#tag = tag;\n    this.#token = token;\n    this.#children = children;\n  }\n\n  protected override appendToken(token: Token): void {\n    this.#children.push(token);\n  }\n\n  done(): Token[] {\n    return [\n      this.#token,\n      ...this.#children,\n      new Token(\"paragraph_close\", this.#tag, -1),\n    ];\n  }\n\n  attr(name: string, value: AttrValue): this {\n    if (value === undefined || value === false) {\n      // do nothing\n    } else if (Array.isArray(value)) {\n      for (const val of attrListValue(value)) {\n        this.#token.attrJoin(name, val);\n      }\n    } else if (value === true) {\n      this.#token.attrSet(name, \"\");\n    } else {\n      const val = attrPart(value);\n      if (val) {\n        this.#token.attrSet(name, val);\n      }\n    }\n\n    return this;\n  }\n}\n\nexport type Child =\n  | LazyChild\n  | Token\n  | string\n  | null\n  | undefined;\n\nexport type Children =\n  | Child[]\n  | ((el: MarkdownFragment) => MarkdownFragment);\n\nexport interface LazyChild {\n  render(tokens: MarkdownFragment): MarkdownFragment;\n}\n\nexport function text(string: string): Token {\n  const token = new Token(\"text\", \"\", 0);\n  token.content = string;\n  return token;\n}\n\nfunction applyValue(\n  token: Token,\n  name: string,\n  value: AttrValue\n): void {\n  if (value === undefined || value === false) {\n    return;\n  } else if (Array.isArray(value)) {\n    for (const val of attrListValue(value)) {\n      token.attrJoin(name, val);\n    }\n  } else if (value === true) {\n    token.attrSet(name, \"\");\n  } else {\n    const val = attrPart(value);\n    if (val) {\n      token.attrSet(name, val);\n    }\n  }\n}\n\nfunction attrListValue(value: AttrPart[]) {\n  return value.map(attrPart).filter(isPresent);\n}\n\nfunction attrPart(value: AttrPart): string | undefined {\n  if (value === undefined || value === null) {\n    return undefined;\n  } else if (typeof value === \"number\") {\n    return String(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else {\n    throw unreachable(value);\n  }\n}\n\nfunction isPresent<T>(value: T | null | undefined): value is T {\n  return value !== null && value !== undefined;\n}\n\nfunction unreachable(_value: never, message = \"unreachable\") {\n  throw new Error(message);\n}\n\ntype ElArgs = [\n  tag: string,\n  attrs?: Record<string, AttrValue> | Children | undefined,\n  children?: Children\n];\n\nfunction normalizeElArgs([tag, attrs, children]: ElArgs): {\n  tag: string;\n  attrs: Record<string, AttrValue>;\n  children: Children | undefined;\n} {\n  if (\n    attrs === undefined ||\n    Array.isArray(attrs) ||\n    typeof attrs === \"function\"\n  ) {\n    return { tag, attrs: {}, children: attrs };\n  } else {\n    return { tag, attrs, children };\n  }\n}\n"]}