{"version":3,"sources":["../src/define.ts"],"names":[],"mappings":"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","file":"define.js","sourcesContent":["import type { PluginHelper, Render } from \"@jsergo/mdit\";\nimport \"@mdit-vue/plugin-sfc\";\nimport { mapEntries } from \"@wycatsjs/utils\";\nimport parseFence from \"fenceparser\";\nimport Token from \"markdown-it/lib/token.js\";\nimport { El, HTML, If, type LazyChildren } from \"./nodes.js\";\nimport {\n  MarkdownElement,\n  ParagraphElement,\n  text,\n  type LazyChild,\n  CustomBuiltin,\n  BasicFragment,\n} from \"./tokens.js\";\n\ntype OBJECT = ReturnType<typeof parseFence>;\ntype VALUE = OBJECT[keyof OBJECT];\nexport const CUSTOM_EL = \"CustomBlock\";\n\ninterface RenderOptions {\n  kind: string;\n  /**\n   * false means \"leave out the title\"\n   * undefined means \"use the default title\"\n   */\n  title: Title;\n  attrs: Record<string, VALUE>;\n  content: UnparsedContent | undefined;\n  md: PluginHelper;\n}\n\nexport class UnparsedContent implements LazyChild {\n  static of(content: string | undefined): UnparsedContent {\n    return new UnparsedContent(content);\n  }\n\n  readonly #content: string | undefined;\n\n  private constructor(content: string | undefined) {\n    this.#content = content;\n  }\n\n  get raw(): string | undefined {\n    return this.#content;\n  }\n\n  render(tokens: MarkdownElement): MarkdownElement {\n    if (this.#content) {\n      return tokens.html(this.#content);\n    }\n    return tokens;\n  }\n}\n\ntype RenderContainer = ({\n  title,\n  kind,\n  attrs,\n  content,\n  md,\n  define,\n}: {\n  title: Title;\n  kind: string;\n  attrs: Record<string, VALUE>;\n  content: UnparsedContent | undefined;\n  md: PluginHelper;\n  define: CustomBuiltin;\n}) => LazyChildren;\n\ntype BuiltinConfig =\n  | {\n      defaultTitle?: string | null | undefined;\n      colors?: {\n        fg?: string | undefined;\n        bg?: string | undefined;\n        border?: string | undefined;\n      };\n    }\n  | CustomConfig;\n\n/**\n * A bare string is the default title.\n */\ntype BasicConfig =\n  | {\n      defaultTitle?: string | null | undefined;\n      colors?: {\n        fg?: string | undefined;\n        bg?: string | undefined;\n        border?: string | undefined;\n      };\n    }\n  | string;\n\ninterface CustomConfig {\n  render: RenderContainer;\n  options?: {} | undefined;\n}\n\nclass Builtin {\n  readonly #config: BuiltinConfig;\n\n  constructor(config: BuiltinConfig) {\n    this.#config = config;\n  }\n\n  render(options: RenderOptions): Token[] {\n    const result = this.#renderFn({\n      ...options,\n      define: new CustomBuiltin(options.md),\n    });\n\n    const fragment = BasicFragment.empty(options.md);\n\n    if (Array.isArray(result)) {\n      fragment.push(...result);\n    } else {\n      fragment.push(result);\n    }\n\n    return fragment.done();\n  }\n\n  get #renderFn(): RenderContainer {\n    if (\n      typeof this.#config === \"object\" &&\n      \"render\" in this.#config\n    ) {\n      return this.#config.render;\n    }\n\n    const defaultBg = \"var(--sbdoc-default-block-bg)\";\n    const defaultFg = \"var(--sbdoc-default-block-fg)\";\n    const bgcolor = this.#config.colors?.bg ?? defaultBg;\n    const fgcolor = this.#config.colors?.fg ?? defaultFg;\n    const border = this.#config.colors?.border ?? fgcolor;\n    console.log({ config: this.#config, bgcolor });\n\n    return ({ md, kind, title: providedTitle, content }) => {\n      const title = providedTitle.withDefault(\n        this.#defaultTitle ?? undefined\n      );\n\n      return ParagraphElement.tag(CUSTOM_EL, md)\n        .attrs({\n          class: [kind],\n          style: `--sbdoc-local-bg: ${bgcolor}; --sbdoc-local-fg: ${fgcolor}; --sbdoc-local-border-color: ${border};`,\n        })\n        .append(\n          If(title, (title) =>\n            El(\"p\", { class: \"custom-block-title\" }, [title])\n          )\n        )\n        .append(content);\n    };\n  }\n\n  get #defaultTitle(): string | void {\n    if (\n      typeof this.#config === \"object\" &&\n      \"defaultTitle\" in this.#config &&\n      typeof this.#config.defaultTitle === \"string\"\n    ) {\n      return this.#config.defaultTitle;\n    }\n  }\n}\n\nexport class Title implements LazyChild {\n  static provided(provided: string | false | undefined): Title {\n    return new Title(provided, undefined);\n  }\n\n  static create(\n    provided: string | false | undefined,\n    defaultValue: string | undefined\n  ): Title {\n    return new Title(provided, defaultValue);\n  }\n\n  readonly #provided: string | undefined | false;\n  readonly #default: string | undefined;\n\n  private constructor(\n    provided: string | false | undefined,\n    defaultValue: string | undefined\n  ) {\n    this.#provided = provided;\n    this.#default = defaultValue;\n  }\n\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return `Title(${JSON.stringify(String(this))})`;\n  }\n\n  withDefault(defaultValue: string | undefined): Title {\n    return new Title(this.#provided, defaultValue);\n  }\n\n  render(tokens: MarkdownElement): MarkdownElement {\n    return tokens.append(text(String(this)));\n  }\n\n  isBlank(): boolean {\n    return this.#provided === false;\n  }\n\n  map<T>(callback: (title: string) => T): T | null {\n    const title = String(this);\n\n    if (title === \"\") {\n      return null;\n    } else {\n      return callback(title);\n    }\n  }\n\n  exists(): boolean {\n    if (this.#provided === false) {\n      return false;\n    } else if (this.#provided === undefined) {\n      return this.#default !== undefined;\n    } else {\n      return true;\n    }\n  }\n\n  get provided(): string | undefined | false {\n    return this.#provided;\n  }\n\n  toString(): string {\n    if (this.#provided === false) {\n      return \"\";\n    } else if (this.#provided === undefined) {\n      return this.#default ?? \"\";\n    } else {\n      return this.#provided;\n    }\n  }\n}\n\nexport class Builtins<N extends string> {\n  static empty(): Builtins<never> {\n    return new Builtins({});\n  }\n\n  static from<N extends string>(\n    config: Record<N, BuiltinConfig>\n  ) {\n    return new Builtins(\n      mapEntries(config, (config, name) => [\n        name,\n        new Builtin(config),\n      ])\n    );\n  }\n\n  readonly #builtins: Record<N, Builtin>;\n\n  constructor(builtins: Record<N, Builtin>) {\n    this.#builtins = builtins;\n  }\n\n  custom<NewName extends string>(\n    name: NewName,\n    render: RenderContainer\n  ): Builtins<N | NewName> {\n    return new Builtins({\n      ...this.#builtins,\n      [name]: new Builtin({\n        render,\n      }),\n    } as Record<N | NewName, Builtin>);\n  }\n\n  basic<NewName extends string>(\n    name: NewName,\n    config?: BasicConfig\n  ): Builtins<N | NewName> {\n    const defaultTitle =\n      typeof config === \"string\"\n        ? config\n        : config?.defaultTitle ?? name.toLocaleUpperCase();\n\n    return new Builtins({\n      ...this.#builtins,\n      [name]: new Builtin({\n        ...(typeof config === \"string\" ? {} : config),\n        defaultTitle,\n      }),\n    } as Record<N | NewName, Builtin>);\n  }\n\n  tryGet(name: string): Builtin | undefined {\n    return (this.#builtins as Record<string, Builtin>)[name];\n  }\n\n  get(name: N): Builtin {\n    return this.#builtins[name];\n  }\n}\n"]}