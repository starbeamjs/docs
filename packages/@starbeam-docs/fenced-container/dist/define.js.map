{"version":3,"sources":["../src/define.ts"],"names":[],"mappings":"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","file":"define.js","sourcesContent":["import type { PluginHelper } from \"@jsergo/mdit\";\nimport \"@mdit-vue/plugin-sfc\";\nimport { mapEntries } from \"@wycatsjs/utils\";\nimport parseFence from \"fenceparser\";\nimport Token from \"markdown-it/lib/token.js\";\nimport { HTML, If } from \"./nodes.js\";\nimport { Tokens, text, type LazyChild } from \"./tokens.js\";\n\ntype OBJECT = ReturnType<typeof parseFence>;\ntype VALUE = OBJECT[keyof OBJECT];\n\ninterface RenderOptions {\n  kind: string;\n  /**\n   * false means \"leave out the title\"\n   * undefined means \"use the default title\"\n   */\n  title: Title;\n  attrs: Record<string, VALUE>;\n  content: UnparsedContent | undefined;\n  md: PluginHelper;\n}\n\nexport class UnparsedContent implements LazyChild {\n  static of(content: string | undefined): UnparsedContent {\n    return new UnparsedContent(content);\n  }\n\n  readonly #content: string | undefined;\n\n  private constructor(content: string | undefined) {\n    this.#content = content;\n  }\n\n  get raw(): string | undefined {\n    return this.#content;\n  }\n\n  render(tokens: Tokens): Tokens {\n    if (this.#content) {\n      return tokens.parse(this.#content);\n    }\n    return tokens;\n  }\n}\n\ntype RenderContainer = ({\n  title,\n  kind,\n  attrs,\n  content,\n  md,\n  tokens,\n}: {\n  title: Title;\n  kind: string;\n  attrs: Record<string, VALUE>;\n  content: UnparsedContent | undefined;\n  md: PluginHelper;\n  tokens: Tokens;\n}) => Token[] | Tokens;\n\ntype BuiltinConfig =\n  | {\n      defaultTitle?: string | null | undefined;\n    }\n  | {\n      render?: RenderContainer;\n    };\n\nclass Builtin {\n  readonly #config: BuiltinConfig;\n\n  constructor(config: BuiltinConfig) {\n    this.#config = config;\n  }\n\n  render(options: RenderOptions): Token[] {\n    const tokens = this.#renderFn({\n      ...options,\n      tokens: Tokens.empty(options.md),\n    });\n\n    if (Array.isArray(tokens)) {\n      return tokens;\n    } else {\n      return tokens.tokens;\n    }\n  }\n\n  get #renderFn(): RenderContainer {\n    if (\"render\" in this.#config) {\n      return this.#config.render;\n    }\n\n    return ({ md, kind, title: providedTitle, content }) => {\n      const title = providedTitle.withDefault(this.#defaultTitle ?? undefined);\n\n      return Tokens.empty(md).el(\"div\", { class: [\"custom-block\", kind] }, [\n        If(title, (title, tokens) =>\n          tokens.el(\"p\", { class: \"custom-block-title\" }, [title])\n        ),\n        content,\n      ]).tokens;\n    };\n  }\n\n  get #defaultTitle(): string | void {\n    if (\n      \"defaultTitle\" in this.#config &&\n      typeof this.#config.defaultTitle === \"string\"\n    ) {\n      return this.#config.defaultTitle;\n    }\n  }\n}\n\nexport class Title implements LazyChild {\n  static provided(provided: string | false | undefined): Title {\n    return new Title(provided, undefined);\n  }\n\n  static create(\n    provided: string | false | undefined,\n    defaultValue: string | undefined\n  ): Title {\n    return new Title(provided, defaultValue);\n  }\n\n  readonly #provided: string | undefined | false;\n  readonly #default: string | undefined;\n\n  private constructor(\n    provided: string | false | undefined,\n    defaultValue: string | undefined\n  ) {\n    this.#provided = provided;\n    this.#default = defaultValue;\n  }\n\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return `Title(${JSON.stringify(String(this))})`;\n  }\n\n  withDefault(defaultValue: string | undefined): Title {\n    return new Title(this.#provided, defaultValue);\n  }\n\n  render(tokens: Tokens): Tokens {\n    return tokens.append(text(String(this)));\n  }\n\n  get provided(): string | undefined | false {\n    return this.#provided;\n  }\n\n  toString(): string {\n    if (this.#provided === false) {\n      return \"\";\n    } else if (this.#provided === undefined) {\n      return this.#default ?? \"\";\n    } else {\n      return this.#provided;\n    }\n  }\n}\n\nexport class Builtins<N extends string> {\n  static empty(): Builtins<never> {\n    return new Builtins({});\n  }\n\n  static from<N extends string>(config: Record<N, BuiltinConfig>) {\n    return new Builtins(\n      mapEntries(config, (config, name) => [name, new Builtin(config)])\n    );\n  }\n\n  readonly #builtins: Record<N, Builtin>;\n\n  constructor(builtins: Record<N, Builtin>) {\n    this.#builtins = builtins;\n  }\n\n  register<NewName extends string>(\n    name: NewName,\n    config?: BuiltinConfig | string | RenderContainer\n  ): Builtins<N | NewName> {\n    function normalize(): BuiltinConfig {\n      if (typeof config === \"string\") {\n        return { defaultTitle: config };\n      } else if (typeof config === \"function\") {\n        return { render: config };\n      } else if (config === undefined) {\n        return { defaultTitle: name.toUpperCase() };\n      } else {\n        return config;\n      }\n    }\n\n    return new Builtins({\n      ...this.#builtins,\n      [name]: new Builtin(normalize()),\n    } as Record<N | NewName, Builtin>);\n  }\n\n  tryGet(name: string): Builtin | undefined {\n    if (name in this.#builtins) {\n      return this.#builtins[name as N];\n    } else {\n      return new Builtin({\n        render: ({ tokens, md }) =>\n          tokens.append(HTML(md.error(`Unknown builtin: ${name}`))),\n      });\n    }\n  }\n\n  get(name: N): Builtin {\n    return this.#builtins[name];\n  }\n}\n"]}