{"version":3,"sources":["../src/nodes.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,2BAA2B;AAK7C,OAAO,SAAS,SAAS,GAAG,QAAiB,EAAa;IACxD,OAAO;QACL,QAAQ,CAAC,SAAmB,OAAO,MAAM,IAAI;IAC/C;AACF,CAAC;AAED,OAAO,SAAS,GAAG,GAAG,IAA8B,EAAa;IAC/D,OAAO;QACL,QAAQ,CAAC,SAAW,OAAO,EAAE,IAAI;IACnC;AACF,CAAC;AAED,OAAO,SAAS,GAAG,IAAoB,EAAa;IAClD,OAAO;QACL,QAAQ,CAAC,SAAW,OAAO,QAAQ;IACrC;AACF,CAAC;AAED,OAAO,SAAS,IACd,MAAS,EACT,IAAqC,EAC1B;IACX,OAAO;QACL,QAAQ,CAAC,SAAW;YAClB,OAAO,OAAO,QAAQ,IAAM,KAAK;QACnC;IACF;AACF,CAAC;AAED,OAAO,SAAS,GACd,SAAY,EACZ,IAAoE,EACpE,OAAwD,EAC7C;IACX,OAAO;QACL,QAAQ,CAAC,SAAW;YAClB,OAAO,OAAO,QAAQ,IAAuB;gBAC3C,IAAI,WAAW;oBACb,OAAO,KAAK,WAAgC;gBAC9C,OAAO,IAAI,oBAAA,qBAAA,KAAA,IAAA,QAAS,IAAI,EAAE;oBACxB,OAAO,QAAQ,IAAI,CAAC;gBACtB,CAAC;YACH;QACF;IACF;AACF,CAAC;AAED,OAAO,SAAS,KAAK,KAAa,EAAa;IAC7C,MAAM,OAAO,IAAI,MAAM,cAAc,OAAO;IAC5C,KAAK,OAAO,GAAG;IACf,OAAO;QACL,QAAQ,CAAC,SAAW,OAAO,MAAM,CAAC;IACpC;AACF,CAAC;AAID,SAAS,OAAO,MAAc,EAAE,QAAwB,EAAU;IAChE,MAAM,WAAW;IACjB,IAAI,MAAM,OAAO,CAAC,WAAW;QAC3B,OAAO,OAAO,MAAM,IAAI;IAC1B,CAAC;IACD,OAAO;AACT","file":"nodes.js","sourcesContent":["import Token from \"markdown-it/lib/token.js\";\nimport { Tokens, type Child, type LazyChild } from \"./tokens.js\";\n\nexport type Falsy = null | undefined | false | 0 | \"\";\n\nexport function Fragment(...children: Child[]): LazyChild {\n  return {\n    render: (tokens: Tokens) => tokens.append(...children),\n  };\n}\n\nexport function El(...args: Parameters<Tokens[\"el\"]>): LazyChild {\n  return {\n    render: (tokens) => tokens.el(...args),\n  };\n}\n\nexport function Do(then: () => Rendered): LazyChild {\n  return {\n    render: (tokens) => render(tokens, then),\n  };\n}\n\nexport function Let<T>(\n  values: T,\n  then: (values: T) => Tokens | Child[]\n): LazyChild {\n  return {\n    render: (tokens) => {\n      return render(tokens, () => then(values));\n    },\n  };\n}\n\nexport function If<T>(\n  condition: T,\n  then: (value: Exclude<T, Falsy>, tokens: Tokens) => Tokens | Child[],\n  options?: { else: (tokens: Tokens) => Tokens | Child[] }\n): LazyChild {\n  return {\n    render: (tokens) => {\n      return render(tokens, (): Rendered | void => {\n        if (condition) {\n          return then(condition as Exclude<T, Falsy>, tokens);\n        } else if (options?.else) {\n          return options.else(tokens);\n        }\n      });\n    },\n  } satisfies LazyChild;\n}\n\nexport function HTML(value: string): LazyChild {\n  const html = new Token(\"html_block\", value, 0);\n  html.content = value;\n  return {\n    render: (tokens) => tokens.append(html),\n  };\n}\n\ntype Rendered = Tokens | Child[] | void;\n\nfunction render(tokens: Tokens, callback: () => Rendered): Tokens {\n  const children = callback();\n  if (Array.isArray(children)) {\n    return tokens.append(...children);\n  }\n  return tokens;\n}\n"]}