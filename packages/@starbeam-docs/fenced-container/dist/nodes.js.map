{"version":3,"sources":["../src/nodes.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,2BAA2B;AAS7C,OAAO,SAAS,SAAS,GAAG,QAAiB,EAAa;IACxD,OAAO;QACL,QAAQ,CAAC,WAAa,SAAS,IAAI,IAAI;IACzC;AACF,CAAC;AAED,OAAO,SAAS,GACd,GAAG,IAAwC,EAChC;IACX,OAAO;QACL,QAAQ,CAAC,WAAa,SAAS,EAAE,IAAI;IACvC;AACF,CAAC;AAED,OAAO,SAAS,OACd,GAAG,IAAwC,EAChC;IACX,OAAO;QACL,QAAQ,CAAC,WAAa,SAAS,MAAM,IAAI;IAC3C;AACF,CAAC;AAED,OAAO,SAAS,GAAG,IAAuB,EAAa;IACrD,OAAO;QACL,QAAQ,CAAC,WAAa,OAAO,UAAU;IACzC;AACF,CAAC;AAED,OAAO,SAAS,IACd,MAAS,EACT,IAAiC,EACtB;IACX,OAAO;QACL,QAAQ,CAAC,WAAa,OAAO,UAAU,KAAK;IAC9C;AACF,CAAC;AAED,OAAO,SAAS,GACd,SAAY,EACZ,IAAgD,EAChD,OAEC,EACU;IACX,OAAO;QACL,QAAQ,CAAC,WAAa;YACpB,IAAI,WAAW;gBACb,OAAO,OACL,UACA,KAAK;YAET,OAAO,IAAI,oBAAA,qBAAA,KAAA,IAAA,QAAS,IAAI,EAAE;gBACxB,OAAO,OAAO,UAAU,QAAQ,IAAI;YACtC,OAAO;gBACL,OAAO;YACT,CAAC;QACH;IACF;AACF,CAAC;AAED,OAAO,SAAS,KAAK,KAAa,EAAa;IAC7C,MAAM,OAAO,IAAI,MAAM,cAAc,OAAO;IAC5C,KAAK,OAAO,GAAG;IACf,OAAO;QACL,QAAQ,CAAC,SAAW,OAAO,MAAM,CAAC;IACpC;AACF,CAAC;AAID,SAAS,OACP,QAA0B,EAC1B,QAAsB,EACJ;IAClB,IAAI,MAAM,OAAO,CAAC,WAAW;QAC3B,KAAK,MAAM,SAAS,SAAU;YAC5B,MAAM,MAAM,CAAC;QACf;IACF,OAAO;QACL,SAAS,MAAM,CAAC;IAClB,CAAC;IACD,OAAO;AACT","file":"nodes.js","sourcesContent":["import Token from \"markdown-it/lib/token.js\";\nimport {\n  MarkdownFragment,\n  type Child,\n  type LazyChild,\n} from \"./tokens.js\";\n\nexport type Falsy = null | undefined | false | 0 | \"\";\n\nexport function Fragment(...children: Child[]): LazyChild {\n  return {\n    render: (fragment) => fragment.push(...children),\n  };\n}\n\nexport function El(\n  ...args: Parameters<MarkdownFragment[\"el\"]>\n): LazyChild {\n  return {\n    render: (fragment) => fragment.el(...args),\n  };\n}\n\nexport function HtmlEl(\n  ...args: Parameters<MarkdownFragment[\"el\"]>\n): LazyChild {\n  return {\n    render: (fragment) => fragment.htmlEl(...args),\n  };\n}\n\nexport function Do(then: () => LazyChild[]): LazyChild {\n  return {\n    render: (fragment) => render(fragment, then()),\n  };\n}\n\nexport function Let<T>(\n  values: T,\n  then: (values: T) => LazyChildren\n): LazyChild {\n  return {\n    render: (fragment) => render(fragment, then(values)),\n  };\n}\n\nexport function If<T>(\n  condition: T,\n  then: (value: Exclude<T, Falsy>) => LazyChildren,\n  options?: {\n    else: () => LazyChildren;\n  }\n): LazyChild {\n  return {\n    render: (fragment) => {\n      if (condition) {\n        return render(\n          fragment,\n          then(condition as Exclude<T, Falsy>)\n        );\n      } else if (options?.else) {\n        return render(fragment, options.else());\n      } else {\n        return fragment;\n      }\n    },\n  } satisfies LazyChild;\n}\n\nexport function HTML(value: string): LazyChild {\n  const html = new Token(\"html_block\", value, 0);\n  html.content = value;\n  return {\n    render: (tokens) => tokens.append(html),\n  };\n}\n\nexport type LazyChildren = LazyChild | LazyChild[];\n\nfunction render(\n  fragment: MarkdownFragment,\n  children: LazyChildren\n): MarkdownFragment {\n  if (Array.isArray(children)) {\n    for (const child of children) {\n      child.render(fragment);\n    }\n  } else {\n    children.render(fragment);\n  }\n  return fragment;\n}\n"]}